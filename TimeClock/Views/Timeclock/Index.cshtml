@model IEnumerable<TimeClock.Resources.ClockInitialItem>

@{
    ViewBag.Title = "Clock";
}

<div class="row">
<div class="three columns">
    <form class="" data-bind="submit: doPunch">
    <fieldset>
        <h4>Time Clock</h4>
        <p>Select your name and enter your pin.</p>
        <div class="row">
                <label>Name</label>
                <select data-bind="
                        options: availableEmployees,
                        value: selectedEmployeeValue,
                        valueUpdate: 'change',
                        optionsText: 'EmployeeName', 
                        optionsValue: 'EmployeeID', 
                        optionsCaption: 'Choose...'">
                </select>
                <input type="hidden" data-bind="value: selectedEmployeeValue, event: { change: getStatus }" value="" />
        </div>
        <div class="row">
            <label>Pin</label>
            <input type="password" class="oversize input-text" id="pin" data-bind="value: employeePin" />
        </div>
        <div class="row"></div>
        <div class="row">
            <a href="#" class="large radius nice blue button" data-bind="click: doPunch, text: punchDirection"></a>
        </div>
    </fieldset>
    </form>
</div>
<div class="nine columns">
    <ul data-bind="foreach: lines, visable: lines().length > 0">
        <li>
            <span data-bind="text: date">&nbsp</span>
            <span data-bind="text: inPunch">&nbsp</span>
            <span data-bind="text: outPunch">&nbsp</span>
            <span data-bind="text: entryTime">&nbsp</span>
            <span data-bind="text: regularHours">&nbsp</span>
            <span data-bind="text: overtimeHours">&nbsp</span>
        </li>
    </ul>
</div>
</div>

<script lang="text/javascript">

    //Class to represent an employee from the database
    function employee(EmployeeName, EmployeeID, DepartmentID) {
        var self = this;
        self.name = EmployeeName;
        self.ID = EmployeeID,
        self.DepartmentID = DepartmentID;
    };
    
    //Array of employee objects
    var employeeList = [
        @foreach ( var item in Model) {
            <text>new employee("@item.EmployeeName", "@item.EmployeeID", @item.DepartmentID)</text>if(Model.Last().EmployeeID != item.EmployeeID){<text>,</text>}}];
        
    // Constructor for an line object
    var line = function (data) {
        this.date = ko.observable(data.date);
        this.inPunch = ko.observable(data.inPunch); 
        this.outPunch = ko.observable(data.outPunch);
        this.entryTime = ko.observable(data.entryTime);
        this.regularHours = ko.observable(data.regularHours);
        this.overtimeHours = ko.observable(data.overtimeHours);
    };

    var TimecardViewModel = function() {
        var self = this;
        
        // Non-editable employee list
        self.availableEmployees = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.EmpList));
        
        self.selectedEmployeeValue = ko.observableArray([]);
        
        self.lines = ko.observableArray([]);       
        
        self.employeePin = ko.observable("");
        
        self.punchDirection = ko.observable("");      

        self.employeePin.subscribe(function() {
            if(self.employeePin().length >= 4) {
                //Nothing for now, eventually want to validate it on the fly!
            }
            return true;
        });

        self.doPunch = function() {
            $.ajax("/REST/timeclock/punch", {
                data: ko.toJSON({ employeeID: self.employeeID, pin: self.employeePin }),
                type: "post", contentType: "application/json",
                success: function(result) { process(result) }
            });
        };

        self.selectedEmployeeValue.subscribe(function() {
            self.getStatus();
        });

        self.getStatus = function() {

            if(self.selectedEmployeeValue() != undefined) {
                $.ajax("/REST/clock/status/" + self.selectedEmployeeValue(), {
                    type: "get", contentType: "application/json",
                    success: function(result) { self.updateStatus(result) }
                });
            }
        };

        self.updateStatus = function(result) {
            self.punchDirection( result.isWorking ? "Punch Out" : "Punch In" );
            self.lines(result.TimeCard);
        };

    }

    $(document).ready(function() { ko.applyBindings( new TimecardViewModel()); });

</script>