@model IEnumerable<TimeClock.Resources.ClockInitialItem>

@{
    ViewBag.Title = "Main";
}

<div class="row">
<div class="twelve columns">
    <form class="custom" data-bind="with: initialData">
    <fieldset>
        <h4>Time Clock</h4>
        <p>Select your name and enter your pin.</p>
        <div class="row">
            <label>Name</label>
            <!-- Employee List -->    
            <select data-bind="
                options: $data,
                value: $root.selectedEmployeeValue,
                valueUpdate: 'change',
                optionsText: 'employeeName', 
                optionsValue: 'employeeID', 
                optionsCaption: 'Choose...'">
            </select>
        </div>
        <div class="row" data-bind="css: { error: $root.isError() == true }">
            <label>Pin</label>
            <input type="password" class="oversize input-text" id="pin" data-bind="value: $root.employeePin" />
            <small class="error" data-bind="visible: $root.pinError().length > 0, value: $root.pinError"></small>
        </div>
        <div class="row" data-bind="with: $root.statusData">
            <a href="#" class="large radius nice blue button" data-bind="click: $root.doPunch, text: punchDirection"></a>
        </div>
    </fieldset>
    </form>
    <!-- ko with: timecardData -->
    <!-- "logged in" view goes here -->


    <!-- /ko -->
</div>
</div>

<script lang="text/javascript">

    // Constructor for status object
    var status = function (data) {
        var me = this;
        if(data.openPunch > 0 ) {
            me.punchDirection   = ko.observable("Punch Out");
            me.openPunch        = ko.observable(data.openPunch);
        } else {
            me.punchDirection   = ko.observable("Punch In");
            me.openPunch        = ko.observable(undefined);
        }
    };

    //The Knockout.js Model
    var TimecardViewModel = function() {
        var self = this;
        //Data
        self.initialData    =   @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.EmpList));
        self.statusData     =   ko.observable();
        self.timecardData   =   ko.observable();
        self.messageData    =   ko.observable();
        self.historyData    =   ko.observable();
        self.settingData    =   ko.observable();

        //Initial Data Properties
        self.selectedEmployeeValue  =   ko.observableArray([]);
        self.employeePin            =   ko.observable("");
        self.isError                =   ko.observable(false);
        self.pin                    =   ko.observable("");
        self.pinError               =   ko.observable("");
        self.generalError           =   ko.observable("");

        //Methods

        self.employeePin.subscribe = function() {
            if(self.employeePin().length >= 4) {
                //Nothing for now, eventually want to validate it on the fly!
            }
            return true;
        };

        self.processPunch = function(data) {
            if(data.isSuccess) {
                self.statusData(undefined);
                self.timecardData = data.timecardData;
            } else {
                //Handle error
                self.isError(true);
                self.pinError(data.pinError);
                self.generalError(data.generalError);
                self.timecardData(undefined);
            }
        };

        //Does the post back to the server with the employee's ID and pin.
        self.doPunch = function() {
            $.ajax("/REST/clock/punch", {
                data:       ko.toJSON({ ID: self.selectedEmployeeValue(), pin: self.employeePin, closesPunch: self.statusData().openPunch }),
                type:       "post",             contentType: "application/json",
                success:    function(result)    { self.processPunch(result); },
                failure:    function(exception) { alert(exception);  }
            });
        };
        
        //When the internal value of selected employee changes, check the employee's status
        self.selectedEmployeeValue.subscribe(function() {
            if(self.selectedEmployeeValue() != undefined) {
                $.get("/REST/clock/status/" + self.selectedEmployeeValue(), {}, self.statusData );
            }
        });

        //Update the UI with new status information
        self.updateStatus = function(result) {
            self.punchDirection( result.openPunch > 0 ? "Punch Out" : "Punch In" );
            self.openPunch( result.openPunch );
            self.lines( result.TimeCard.length ? result.TimeCard : "" );
        };

        self.reset = function() {
            self.timecardData(undefined);
            self.messageData(undefined);
            self.historyData(undefined);
            self.settingData(undefined);
            $.get("/REST/clock/list", {}, self.initialData);
        }

    }

    $(document).ready(function() { ko.applyBindings( new TimecardViewModel()); });

</script>